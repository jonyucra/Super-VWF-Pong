---
extends: http://vwf.example.com/scene.vwf
children:
  board:
    extends: http://vwf.example.com/node3.vwf
    source: board.dae
    children:
      boardMaterial:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#A1ACCB"
  playerOne:
    extends: http://vwf.example.com/node3.vwf
    source: paddle.dae
    properties:
      xPos: -220
      translation: [-470, 0, 0]
    children:
      playerOneMaterial:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#B74C4C"
  playerTwo:
    extends: http://vwf.example.com/node3.vwf
    source: paddle.dae
    properties:
      xPos: 231
    children:
      playerTwoMaterial:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#B74C4C"
  ball:
    extends: http://vwf.example.com/node3.vwf
    source: ball.dae
    properties:
      xSpeed: 2
      ySpeed: 5
    methods:
      move:
      dealWithPaddelBounce:
    children:
      ballMaterial:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#0000ff"   
    scripts:
    - |
      this.move = function() {
        var newTrans = [ 
          this.translation[ 0 ] + this.xSpeed, 
          this.translation[ 1 ] + this.ySpeed, 
          this.translation[ 2 ] 
        ];
        // Did we hit a wall?
        var maxY = 145;
        var minY = -maxY;
        if ( newTrans[ 1 ] >= maxY ) {
          newTrans[ 1 ] = maxY;
          this.ySpeed = -this.ySpeed;
        } else if ( newTrans[ 1 ] <= minY ) {
          newTrans[ 1 ] = minY;
          this.ySpeed = -this.ySpeed;
        }
        // Did we hit a paddle?
        var ballAtRightSide = ( newTrans[ 0 ] >= this.parent.playerTwo.xPos );
        var ballAtLeftSide = ( newTrans[ 0 ] <= this.parent.playerOne.xPos );
        if ( ballAtRightSide ) {
          this.dealWithPaddleBounce( this.parent.playerTwo, newTrans );
        } else if ( ballAtLeftSide ) {
          this.dealWithPaddleBounce( this.parent.playerOne, newTrans );
        } else {
          this.translation = newTrans;
        }
      };
      this.dealWithPaddleBounce = function( paddle, translation ) {
        var yPos = paddle.translation[ 1 ];
        var paddleExtent = 36;
        if ( translation[ 1 ] > ( yPos + paddleExtent ) || translation[ 1 ] < ( yPos - paddleExtent ) ) {
          // Ball got past the paddle: reset the ball position and speed.
          this.translateTo( [ 0, 0, 0 ] );
          this.xSpeed = 2;
          this.ySpeed = 5;
          return true;
        } else {
          // Ball hit the paddle: just bounce.
          translation[ 0 ] = paddle.xPos;
          this.xSpeed = -this.xSpeed;
          return false;
        }
      };   
        

  light:
    extends: http://vwf.example.com/light.vwf
    properties:
      distance: 2000
      translation: [ 400, -400, 900 ]
methods:
  update:
  initializeCamera:
properties:
  keyPressInfo:
  paddleSpeed: 2.5
scripts:
  - |
    this.initialize = function() {
      this.future( 0 ).initializeCamera();
      this.future( 0 ).update();
    }
    this.initializeCamera = function() {
      this.camera.translation = [ 250, -600, 150 ];
      this.camera.rotation = [ 1, 0, 0, -10 ];
    }
    this.update = function() {
      if ( this.keyPressInfo ) {
        for ( var keyPress in this.keyPressInfo.keysDown ) {
          switch( keyPress ) {
            case 'R':
             console.log("Moving playerOne up");
             this.movePlayer( this.playerOne, +1);
             break;
            case 'F':
             console.log("Moving playerOne down");
             this.movePlayer( this.playerOne, -1);
             break;
            case 'O':
             console.log("Moving playerTwo up");
             this.movePlayer( this.playerTwo, +1);
             break;
            case 'L':
             console.log("Moving playerTwo down");
             this.movePlayer( this.playerTwo, -1);
             break;
            default:
             break;
          }
        }
      }
      this.ball.move();
      this.future( 1.0/60.0 ).update();
    }
    this.keyDown = this.keyUp = function( input ) {
      this.keyPressInfo = input;
    }
    this.movePlayer = function ( player, direction ) {
      var amount = direction * this.paddleSpeed;
      if ( player.translation[ 1 ] + amount >= 120 || player.translation[ 1 ] + amount <= -120 ) {
        player.translateTo( [ player.translation[ 0 ], 120 * direction , 0 ] );
        return;
      } else {
        player.translateBy( [ 0, direction * this.paddleSpeed, 0 ] );
      }
    }